image: $SKA_K8S_TOOLS_BUILD_DEPLOY

default:
  tags:
    - ska-k8s

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  MINIKUBE: "false"

stages:
  - lint
  - build
  - on-demand
  - test #BDD will come later, just python tests for now if required
  - deploy
  - integration
  - staging # - join-reports
  - pages
  - publish  # might not need in our case
  - scan

# Include CI templates
include:
# OCI Images
# do a custom set of build and publish stages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

# Python packages build,lint, test and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

# Jupyter notebook linting and testing
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/notebook.gitlab-ci.yml' # this is for using jupyter notebooks

# Helm Charts
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

# Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

# .post step finalisers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

# k8s steps
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s.gitlab-ci.yml'

# changelog release page
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml' 

# deploy steps
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/deploy.gitlab-ci.yml' 

  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python-lint.gitlab-ci.yml'

  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs-pages.gitlab-ci.yml'


  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/deploy.integration.gitlab-ci.yml'

  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/deploy.staging.gitlab-ci.yml"

  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

notebook-lint:
  allow_failure: true 

notebook-test:
  rules:
    - when: never

python-gemnasium-scan:
  rules:
    - when: never

python-test: 
  rules:
    - when: never



k8s-test: 
  rules:
    - when: never

deploy-integration:
  rules:
    - when: never

stop-k8s-test: 
  rules:
    - when: never

info-integration:
  rules:
    - when: never

stop-integration:
  rules:
    - when: never

redeploy-integration:
  rules:
    - when: never


deploy-tmc-with-sdp:
  extends: deploy-integration
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
  variables:
    TELESCOPE: 'SKA-mid'
    PORT: "10000"
    KUBE_NAMESPACE: 'integration-ska-mid-tmc-sdp'
    KUBE_NAMESPACE_SDP: 'integration-ska-tmc-mid-sdp'
    SDP_SIMULATION_ENABLED: 'false'
  
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    on_stop: stop-k8s-test-tmc-with-sdp


stop-k8s-test-tmc-with-sdp:
  extends:
    - stop-k8s-test
  variables:
    KUBE_NAMESPACE: 'integration-ska-mid-tmc-sdp'
    SDP_SIMULATION_ENABLED: 'false'
  rules:
    - when: manual  # Allow this job to be triggered manually
  script:
    - echo "Deleting namespace $KUBE_NAMESPACE"
    - kubectl delete namespace $KUBE_NAMESPACE  # This will delete the namespace



deploy-tmc-with-csp:
  extends: deploy-mid-integration
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
  variables:
    TELESCOPE: 'SKA-mid'
    PORT: "10000"
    KUBE_NAMESPACE: 'integration-ska-mid-tmc-csp'
    CSP_SIMULATION_ENABLED: 'false'
    
  
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    on_stop: stop-k8s-test-tmc-with-csp

stop-k8s-test-tmc-with-csp:
  extends:
    - stop-k8s-test
  variables:
    KUBE_NAMESPACE: 'integration-ska-mid-tmc-csp'
    CSP_SIMULATION_ENABLED: 'false'
  rules:
    - when: manual  # Allow this job to be triggered manually
  script:
    - echo "Deleting namespace $KUBE_NAMESPACE"
    - kubectl delete namespace $KUBE_NAMESPACE  # This will delete the namespace


deploy-dish-lmc:
  extends: deploy-mid-integration
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
  variables:
    DISH_INDICES: "001 002 003 100"
    DISH_NAMESPACES: "integration-ska-mid-tmc-dish01 integration-ska-mid-tmc-dish036 integration-ska-mid-tmc-dish064 integration-ska-mid-tmc-dish100"
    DISH_HELM_RELEASE: "4.1.0"
    K8S_DISH_LMC_CHART: "ska-dish-lmc"
  script:
    - IFS=' ' read -r -a indices <<< "$DISH_INDICES"; \
      IFS=' ' read -r -a namespaces <<< "$DISH_NAMESPACES"; \
      for index in "${!indices[@]}"; do \
        DISH_INDEX=${indices[$index]}; \
        KUBE_NAMESPACE=${namespaces[$index]}; \
        make k8s-install-chart-car \
          KUBE_NAMESPACE=$KUBE_NAMESPACE \
          K8S_CHART_PARAMS="-f charts/dish_lmc_values.yml \
            --set global.dishes={$DISH_INDEX} \
            --version=$DISH_HELM_RELEASE \
            --set global.cluster_domain=$(CLUSTER_DOMAIN)" \
          HELM_RELEASE=$DISH_HELM_RELEASE \
          K8S_CHART=$K8S_DISH_LMC_CHART; \
        make k8s-wait; \
      done
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    on_stop: stop-k8s-test-tmc-with-dish
    action: stop
  allow_failure: true


stop-k8s-test-tmc-with-dish:
  extends:
    - stop-k8s-test
  variables:
    KUBE_NAMESPACE: 'integration-ska-mid-tmc-dish'
    DISH_SIMULATION_ENABLED: 'false'
  rules:
    - when: manual  # Allow this job to be triggered manually
  script:
    - echo "Deleting namespace $KUBE_NAMESPACE"
    - kubectl delete namespace $KUBE_NAMESPACE




deploy-mid-integration:
  extends: deploy-integration
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  variables:
    KUBE_NAMESPACE: "integration-ska-mid-test" #changing namespace
  environment:
    name: integration-ska-mid-test
    on_stop: stop-mid-integration

info-mid-integration:
  extends: info-integration
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  needs:
    - deploy-mid-integration
  variables:
    KUBE_NAMESPACE: "integration-ska-mid-test" #changing namespace
  environment:
    name: integration-ska-mid-test

stop-mid-integration:
  extends: stop-integration
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  needs:
    - deploy-mid-integration
  variables:
    KUBE_NAMESPACE: "integration-ska-mid-test" #changing namespace
  environment:
    name: integration-ska-mid-test
    action: stop

redeploy-mid-integration:
  extends: redeploy-integration
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  variables:
    KUBE_NAMESPACE: "integration-ska-mid-test" #changing namespace
  environment:
    name: integration-ska-mid-test


