image: $SKA_K8S_TOOLS_BUILD_DEPLOY

default:
  tags:
    - ska-k8s

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  MINIKUBE: "false"

stages:
  - lint
 # - test
  - build
  - deploy
  - integration
  - staging
 # - join-reports
  - pages
  - publish
  - scan

# Include CI templates
include:
# OCI Images
# do a custom set of build and publish stages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

# Python packages build,lint, test and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

# Jupyter notebook linting and testing
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/notebook.gitlab-ci.yml'

# Helm Charts
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

# Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

# .post step finalisers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

# k8s steps
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s.gitlab-ci.yml'

# changelog release page
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'

# deploy steps
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/deploy.gitlab-ci.yml'

notebook-lint:
  allow_failure: true

notebook-test:
  rules:
    - when: never

python-gemnasium-scan:
  rules:
    - when: never

stop-k8s-test: 
  rules:
    - when: never

k8s-test: 
  rules:
    - when: never

deploy-dev-environment:
  rules:
    - when: never

test-dev-environment:
  rules:
    - when: never

info-dev-environment:
  rules:
    - when: never

stop-dev-environment:
  rules:
    - when: never

deploy-integration:
  rules:
    - when: never
 
info-integration:
  rules:
    - when: never

stop-integration:
  rules:
    - when: never

redeploy-integration:
  rules:
    - when: never

deploy-staging:
  rules:
    - when: never

info-staging:
  rules:
    - when: never

stop-staging:
  rules:
    - when: never

redeploy-staging:
  rules:
    - when: never


deploy-mid-dev-environment:
  extends: deploy-dev-environment
  rules:
    - when: manual
  variables:
    KUBE_NAMESPACE: "ci-dev-mid-g2-$CI_PROJECT_NAME"
    CI_KEEP_NAMESPACE: true
    SKIP_CI: 1
  environment:
    name: ci-dev-mid-g2-$CI_PROJECT_NAME
    on_stop: stop-mid-dev-environment
    auto_stop_in: 4 hours

# test-mid-dev-environment:
#   extends: test-dev-environment
#   rules:
#     - when: on_success
#   needs:
#     - deploy-mid-dev-environment
#   variables:
#     KUBE_NAMESPACE: "ci-dev-mid-g2-$CI_PROJECT_NAME"
#   environment:
#     name: ci-dev-mid-g2-$CI_PROJECT_NAME

info-mid-dev-environment:
  extends: info-dev-environment
  rules:
    - when: manual
  needs:
    - deploy-mid-dev-environment
  variables:
    KUBE_NAMESPACE: "ci-dev-mid-g2-$CI_PROJECT_NAME"
  environment:
    name: ci-dev-mid-g2-$CI_PROJECT_NAME

stop-mid-dev-environment:
  extends: stop-dev-environment
  rules:
    - when: manual
  variables:
    KUBE_NAMESPACE: "ci-dev-mid-g2-$CI_PROJECT_NAME"
  environment:
    name: ci-dev-mid-g2-$CI_PROJECT_NAME
    action: stop

deploy-mid-integration:
  extends: deploy-integration
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  variables:
    KUBE_NAMESPACE: "mid-g2-integration-$CI_PROJECT_NAME"
  environment:
    name: mid-g2-integration-$CI_PROJECT_NAME
    on_stop: stop-mid-integration

info-mid-integration:
  extends: info-integration
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  needs:
    - deploy-mid-integration
  variables:
    KUBE_NAMESPACE: "mid-g2-integration-$CI_PROJECT_NAME"
  environment:
    name: mid-g2-integration-$CI_PROJECT_NAME

stop-mid-integration:
  extends: stop-integration
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  needs:
    - deploy-mid-integration
  variables:
    KUBE_NAMESPACE: "mid-g2-integration-$CI_PROJECT_NAME"
  environment:
    name: mid-g2-integration-$CI_PROJECT_NAME
    action: stop

redeploy-mid-integration:
  extends: redeploy-integration
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  variables:
    KUBE_NAMESPACE: "mid-g2-integration-$CI_PROJECT_NAME"
  environment:
    name: mid-g2-integration-$CI_PROJECT_NAME

# deploy-mid-staging:
#   extends: deploy-staging
#   rules:
#     - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
#   needs: 
#     - deploy-mid-integration
#   variables:
#     KUBE_NAMESPACE: "mid-g2-staging-$CI_PROJECT_NAME"
#   environment:
#     name: mid-g2-staging-$CI_PROJECT_NAME
#     on_stop: stop-mid-staging

# info-mid-staging:
#   extends: info-staging
#   rules:
#     - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
#   needs:
#       - deploy-mid-staging
#   variables:
#     KUBE_NAMESPACE: "mid-g2-staging-$CI_PROJECT_NAME"
#   environment:
#     name: mid-g2-staging-$CI_PROJECT_NAME

# stop-mid-staging:
#   extends: stop-staging
#   rules:
#     - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
#   needs:
#     - deploy-mid-staging
#   variables:
#     KUBE_NAMESPACE: "mid-g2-staging-$CI_PROJECT_NAME"
#   environment:
#     name: mid-g2-staging-$CI_PROJECT_NAME
#     action: stop

# redeploy-mid-staging:
#   extends: redeploy-staging
#   rules:
#     - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
#   variables:
#     KUBE_NAMESPACE: "mid-g2-staging-$CI_PROJECT_NAME"
#   environment:
#     name: mid-g2-staging-$CI_PROJECT_NAME

